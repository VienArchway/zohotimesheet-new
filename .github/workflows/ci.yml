name: Build to prod and deploy to Azure container registry

on:
  push:
    branches:
      - 'feature/**'
      - 'bug/**'
      - 'fix/**'

  pull_request_target:
    types:
      - closed
    branches:
      - main

jobs:
  client-build:
    runs-on: ubuntu-latest
    name: Client build
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16.x

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Install dependencies
        working-directory: ./src/client
        run: npm ci --ignore-scripts
        
      - name: Create .env.production file
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_FE_ZOHO_CLIENT_ID: 1000.Z1JHOXVXLJRC1BXDJX7HQJUVGSDKED
          envkey_FE_ZOHO_REDIRECT_URI: https://zohotimesheetaw.azurewebsites.net/auth/callback
          envkey_FE_ZOHO_ACCESS_TYPE: offline
          envkey_FE_ZOHO_CODE_RESPONSE_TYPE: code
          envkey_FE_ZOHO_TOKEN_PATH: oauth/v2/token
          envkey_FE_ZOHO_LOGIN_URL: https://accounts.zoho.com/oauth/v2/auth
          envkey_FE_ZOHO_LOGIN_SCOPE: aaaserver.profile.READ%20ZohoSprints.teams.READ%20ZohoSprints.projects.READ%20ZohoSprints.sprints.READ%20ZohoSprints.timesheets.READ%20ZohoSprints.items.READ%20ZohoSprints.timesheets.CREATE%20ZohoSprints.timesheets.UPDATE%20ZohoSprints.timesheets.DELETE%20ZohoSprints.items.UPDATE%20ZohoSprints.teamusers.READ%20ZohoSprints.webhook.READ%20ZohoSprints.webhook.UPDATE%20ZohoSprints.teams.READ
          envkey_FE_API_URL: http://0.0.0.0:80
          file_name: .env.production
          directory: ./src/client

      - name: Build production
        working-directory: ./src/client
        run: npm run build

      - name: Upload build dist
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ${{ github.workspace }}/src/client/dist
  
  #      - name: Unit Test
  #        run: npm run test
  
  #  cypress-run:
  #    runs-on: ubuntu-20.04
  #    steps:
  #      - name: Checkout
  #        uses: actions/checkout@v2
  #        
  #      - name: Install dependencies
  #        run: npm install
  #
  #      - name: Cypress run
  #        uses: cypress-io/github-action@v2
  #        with:
  #          working-directory: ./src/client/
  #          install-command: echo
  #          build: npm run build
  #          start: npx vite --port 3000
        
  api-build:
    runs-on: ubuntu-latest
    name: Api build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x' # SDK Version to use; x will use the latest version
      - run: dotnet build 
        working-directory: ${{ github.workspace }}/src/api
        
      - name: Publish the package to prod
        working-directory: ${{ github.workspace }}/src/api
        run: dotnet publish -c Release

      - name: Upload publish 
        uses: actions/upload-artifact@v3
        with:
          name: publish
          path: ${{ github.workspace }}/src/api/bin/Release/net6.0/publish/
  
  
  create-and-copy-dist-to-prod:
    name: Copy to prod
    if: ${{ always() }}
    needs: [client-build, api-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: create prod dir
        run: |
          mkdir prod
          mkdir prod/dist
      - name: copy dist to prod
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: ${{ github.workspace }}/prod/dist
      - name: copy publish to prod
        uses: actions/download-artifact@v3
        with:
          name: publish
          path: ${{ github.workspace }}/prod/
      - name: show prod
        run: |
          ls -la prod/
          ls -la prod/dist
          rm -rf prod/runtimes

      - name: Upload prod
        uses: actions/upload-artifact@v3
        with:
          name: prod
          path: ${{ github.workspace }}/prod

  build-and-deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    name: Create image and push to ACR
    needs: create-and-copy-dist-to-prod
    steps:
      - uses: actions/checkout@main
      - name: create prod dir
        run: |
          mkdir prod

      - name: Authenticate using a Service Principal
        uses: azure/actions/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Build and push image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: copy dist to prod
        uses: actions/download-artifact@v3
        with:
          name: prod
          path: ${{ github.workspace }}/prod

      - name: Build and push the image tagged with the git commit hash
        run: |
          ls -la ${{ github.workspace }}
          ls -la ${{ github.workspace }}/prod
          docker build . -t aci-zohotimesheet:v1.1
          docker tag aci-zohotimesheet:v1.1 ${{ secrets.REGISTRY_LOGIN_SERVER }}/aci-zohotimesheet:v1.1
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/aci-zohotimesheet:v1.1